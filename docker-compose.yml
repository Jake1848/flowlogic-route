version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flowlogic_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-flowlogic}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flowlogic-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: flowlogic_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flowlogic-network

  # FlowLogic API (Core + SaaS)
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: flowlogic_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-flowlogic}
      ASYNC_DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-flowlogic}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Firebase Auth
      FIREBASE_SERVICE_ACCOUNT_JSON: ${FIREBASE_SERVICE_ACCOUNT_JSON}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PRICE_STARTER: ${STRIPE_PRICE_STARTER}
      STRIPE_PRICE_PROFESSIONAL: ${STRIPE_PRICE_PROFESSIONAL}
      STRIPE_PRICE_ENTERPRISE: ${STRIPE_PRICE_ENTERPRISE}
      
      # Optional services
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GRAPHHOPPER_API_KEY: ${GRAPHHOPPER_API_KEY:-}
      
      # Admin setup
      CREATE_ADMIN: ${CREATE_ADMIN:-false}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      ADMIN_FIREBASE_UID: ${ADMIN_FIREBASE_UID:-}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - flowlogic-network
    labels:
      - "traefik.enable=true"
      # Core API
      - "traefik.http.routers.core-api.rule=Host(`${API_DOMAIN:-api.flowlogic.ai}`) && PathPrefix(`/route`)"
      - "traefik.http.routers.core-api.service=core-api"
      - "traefik.http.services.core-api.loadbalancer.server.port=8000"
      # SaaS API
      - "traefik.http.routers.saas-api.rule=Host(`${API_DOMAIN:-api.flowlogic.ai}`) && !PathPrefix(`/route`)"
      - "traefik.http.routers.saas-api.service=saas-api"
      - "traefik.http.services.saas-api.loadbalancer.server.port=8001"

  # NGINX Reverse Proxy (Alternative to Traefik)
  nginx:
    image: nginx:alpine
    container_name: flowlogic_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - flowlogic-network
    profiles:
      - nginx

  # Traefik Reverse Proxy (Recommended for production)
  traefik:
    image: traefik:v2.10
    container_name: flowlogic_traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@flowlogic.ai}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - flowlogic-network
    profiles:
      - traefik

  # Optional: Backup service
  backup:
    image: postgres:15-alpine
    container_name: flowlogic_backup
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - ./backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    command: >
      sh -c "
        while true; do
          /backup.sh
          sleep 86400
        done
      "
    networks:
      - flowlogic-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  traefik_data:
    driver: local

networks:
  flowlogic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16